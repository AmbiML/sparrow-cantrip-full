// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

procedure uart_read_inf {
  // Reads up to limit bytes into the read dataport.
  //
  // Returns the number of bytes read or a negative value if there is any
  // error.
  int read(in size_t limit);
};

procedure uart_write_inf {
  // Writes up to a given number of bytes from the write dataport.
  //
  // Returns the number of bytes actually written or a negative value if there
  // is any error. For non-negative return values < available, the caller is
  // reponsible for retrying with the remaining bytes at the beginning of the
  // write dataport.
  int write(in size_t available);

  // Blocks until all bytes so far written have been pushed to the real sink.
  //
  // The semantics are the same as Rust's Write::flush. Returns 0 on success
  // and a negative value if there is any error.
  int flush();
}