// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "platform.camkes"

import <std_connector.camkes>;

import <DebugConsole/DebugConsole.camkes>;
import <ProcessManager/ProcessManager.camkes>;
import <MemoryManager/MemoryManager.camkes>;
import <SecurityCoordinator/SecurityCoordinator.camkes>;
import <SDKRuntime/SDKRuntime.camkes>;

component BuiltinCpioArchive {
    hardware;
    dataport Buf(CPIO_SIZE_BYTES) cpio;
}

assembly {
    composition {
        component BuiltinCpioArchive cpio;

        component MemoryManager memory_manager;
        component ProcessManager process_manager;
        component DebugConsole debug_console;
        component SecurityCoordinator security_coordinator;

        component SDKRuntime sdk_runtime;

        // Built-in CPIO archive is visible only to the SecurityCoordinator.
        connection cantripMMIO cpio_archive(from security_coordinator.cpio_archive,
                                            to cpio.cpio);

        // Hookup ProcessManager to DebugConsole for shell commands.
        connection cantripRPCCall shell_process(from debug_console.proc_ctrl,
                                             to process_manager.proc_ctrl);

        // ProcessMaanager talks to the SDKManager (the privileged part of
        // the SDKRuntime) to plumb a badged connection between applications
        // and the SDKRuntime.
        connection cantripRPCCall multi_sdk_manager(
            from process_manager.sdk_manager,
            from debug_console.sdk_manager,  // NB: for capscan support
            to sdk_runtime.sdk_manager);

        // NB: requires dynamic_load_support, otherwise only builtins are available
        // Note this allocates a 4KB shared memory region for pkg install
        // to pass an ObjDescArray
        connection cantripRPCOverMultiSharedData shell_package(
            from debug_console.pkg_mgmt,
            to process_manager.pkg_mgmt);

        // Connect the MemoryInterface to each component that needs to allocate
        // global memory. Note this allocates a 4KB shared memory region to each
        // component and copies data between components.
        connection cantripRPCOverMultiSharedData multi_memory(
            from debug_console.memory,
            from process_manager.memory,
            from security_coordinator.memory,
            from sdk_runtime.memory,
            to memory_manager.memory);

        // Connect the SecurityCoordinatorInterface to each component that needs
        // access to the Security Core. Note this allocates a 4KB shared memory
        // region to each component and copies data between components.
        connection cantripRPCOverMultiSharedData multi_security(
            from debug_console.security,   // NB: for debug/test
            from process_manager.security,
            from sdk_runtime.security,     // NB: for key-value store
            to security_coordinator.security);

        // Connect the LoggerInterface to each component that needs to log
        // to the console. Note this allocates a 4KB shared memory region to
        // each component and copies data between components.
        connection cantripRPCOverMultiSharedData multi_logger(
            from process_manager.logger,
            from memory_manager.logger,
            from security_coordinator.logger,
            from sdk_runtime.logger,
            to debug_console.logger);
    }

    configuration {
        cpio.cpio_paddr = CPIO_BASE_ADDR;
        cpio.cpio_size = CPIO_SIZE_BYTES;

        // TODO(sleffler): temp stack bumps until code is fixed
        memory_manager._stack_size = 32*1024; // 2x stack for pre_init work
        memory_manager.memory_stack_size = 16*1024;

        process_manager._stack_size = 16*1024;
        process_manager.proc_ctrl_stack_size = 32*1024; // 2x for bundle creation
        // NB: only meaningful with dynamic_load_support
        process_manager.pkg_mgmt_stack_size = 16*1024;

        // TODO(sleffler): need to understand why a larger stack is needed
        debug_console._stack_size = 32*1024;  // 2x to run autostart.repl
        debug_console.logger_stack_size = 16*1024;

        security_coordinator._stack_size = 16*1024;
        security_coordinator.security_stack_size = 16*1024;

        sdk_runtime._stack_size = 16*1024;
        sdk_runtime.sdk_manager_stack_size = 16*1024;

        random.ID = 1;
    }
}
